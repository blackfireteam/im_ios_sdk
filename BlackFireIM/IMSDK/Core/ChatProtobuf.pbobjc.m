// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatProtobuf.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ChatProtobuf.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ChatItem);
GPBObjCClassDeclaration(ChatR);
GPBObjCClassDeclaration(GetProfile);
GPBObjCClassDeclaration(Profile);

#pragma mark - ChatProtobufRoot

@implementation ChatProtobufRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ChatProtobufRoot_FileDescriptor

static GPBFileDescriptor *ChatProtobufRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Ping

@implementation Ping

@dynamic type;

typedef struct Ping__storage_ {
  uint32_t _has_storage_[1];
  int64_t type;
} Ping__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.clazz = Nil,
        .number = Ping_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Ping__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Ping class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Ping__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ImLogin

@implementation ImLogin

@dynamic sign;
@dynamic token;
@dynamic ct;

typedef struct ImLogin__storage_ {
  uint32_t _has_storage_[1];
  NSString *token;
  int64_t sign;
  int64_t ct;
} ImLogin__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = ImLogin_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ImLogin__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "token",
        .dataTypeSpecific.clazz = Nil,
        .number = ImLogin_FieldNumber_Token,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ImLogin__storage_, token),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ct",
        .dataTypeSpecific.clazz = Nil,
        .number = ImLogin_FieldNumber_Ct,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ImLogin__storage_, ct),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ImLogin class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ImLogin__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ImLogout

@implementation ImLogout

@dynamic sign;

typedef struct ImLogout__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
} ImLogout__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = ImLogout_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ImLogout__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ImLogout class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ImLogout__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Result

@implementation Result

@dynamic sign;
@dynamic code;
@dynamic msg;
@dynamic nowTime;
@dynamic uid;

typedef struct Result__storage_ {
  uint32_t _has_storage_[1];
  NSString *msg;
  int64_t sign;
  int64_t code;
  int64_t nowTime;
  int64_t uid;
} Result__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = Result_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Result__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = Result_FieldNumber_Code,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Result__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = Nil,
        .number = Result_FieldNumber_Msg,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Result__storage_, msg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nowTime",
        .dataTypeSpecific.clazz = Nil,
        .number = Result_FieldNumber_NowTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Result__storage_, nowTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "uid",
        .dataTypeSpecific.clazz = Nil,
        .number = Result_FieldNumber_Uid,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Result__storage_, uid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Result class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Result__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatS

@implementation ChatS

@dynamic sign;
@dynamic type;
@dynamic toUid;
@dynamic title;
@dynamic body;
@dynamic thumb;
@dynamic width;
@dynamic height;
@dynamic duration;
@dynamic lat;
@dynamic lng;
@dynamic zoom;

typedef struct ChatS__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  NSString *body;
  NSString *thumb;
  int64_t sign;
  int64_t type;
  int64_t toUid;
  int64_t width;
  int64_t height;
  int64_t duration;
  double lat;
  double lng;
  int64_t zoom;
} ChatS__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatS__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChatS__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toUid",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_ToUid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChatS__storage_, toUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_Title,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ChatS__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "body",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_Body,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ChatS__storage_, body),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "thumb",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_Thumb,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ChatS__storage_, thumb),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "width",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_Width,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ChatS__storage_, width),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "height",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_Height,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ChatS__storage_, height),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "duration",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_Duration,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ChatS__storage_, duration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "lat",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_Lat,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ChatS__storage_, lat),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "lng",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_Lng,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(ChatS__storage_, lng),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "zoom",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_Zoom,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(ChatS__storage_, zoom),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatS class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatS__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatSR

@implementation ChatSR

@dynamic sign;
@dynamic msgId;
@dynamic msgTime;

typedef struct ChatSR__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
  int64_t msgId;
  int64_t msgTime;
} ChatSR__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatSR_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatSR__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatSR_FieldNumber_MsgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChatSR__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgTime",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatSR_FieldNumber_MsgTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChatSR__storage_, msgTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatSR class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatSR__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatR

@implementation ChatR

@dynamic sign;
@dynamic fromUid;
@dynamic toUid;
@dynamic msgId;
@dynamic msgTime;
@dynamic sput;
@dynamic newMsg;
@dynamic type;
@dynamic title;
@dynamic body;
@dynamic thumb;
@dynamic width;
@dynamic height;
@dynamic duration;
@dynamic lat;
@dynamic lng;
@dynamic zoom;

typedef struct ChatR__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  NSString *body;
  NSString *thumb;
  int64_t sign;
  int64_t fromUid;
  int64_t toUid;
  int64_t msgId;
  int64_t msgTime;
  int64_t sput;
  int64_t type;
  int64_t width;
  int64_t height;
  int64_t duration;
  double lat;
  double lng;
  int64_t zoom;
} ChatR__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatR__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fromUid",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_FromUid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChatR__storage_, fromUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toUid",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_ToUid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChatR__storage_, toUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_MsgId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ChatR__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgTime",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_MsgTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ChatR__storage_, msgTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sput",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_Sput,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ChatR__storage_, sput),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "newMsg",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_NewMsg,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "type",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_Type,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ChatR__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_Title,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ChatR__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "body",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_Body,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(ChatR__storage_, body),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "thumb",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_Thumb,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(ChatR__storage_, thumb),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "width",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_Width,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(ChatR__storage_, width),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "height",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_Height,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(ChatR__storage_, height),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "duration",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_Duration,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(ChatR__storage_, duration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "lat",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_Lat,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(ChatR__storage_, lat),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "lng",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_Lng,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(ChatR__storage_, lng),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "zoom",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_Zoom,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(ChatR__storage_, zoom),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatR class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatR__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatRBatch

@implementation ChatRBatch

@dynamic sign;
@dynamic msgsArray, msgsArray_Count;

typedef struct ChatRBatch__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *msgsArray;
  int64_t sign;
} ChatRBatch__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatRBatch_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatRBatch__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ChatR),
        .number = ChatRBatch_FieldNumber_MsgsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChatRBatch__storage_, msgsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatRBatch class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatRBatch__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetHistory

@implementation GetHistory

@dynamic sign;
@dynamic toUid;
@dynamic msgEnd;
@dynamic msgStart;
@dynamic offset;

typedef struct GetHistory__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
  int64_t toUid;
  int64_t msgEnd;
  int64_t msgStart;
  int64_t offset;
} GetHistory__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = GetHistory_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetHistory__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toUid",
        .dataTypeSpecific.clazz = Nil,
        .number = GetHistory_FieldNumber_ToUid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetHistory__storage_, toUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgEnd",
        .dataTypeSpecific.clazz = Nil,
        .number = GetHistory_FieldNumber_MsgEnd,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetHistory__storage_, msgEnd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgStart",
        .dataTypeSpecific.clazz = Nil,
        .number = GetHistory_FieldNumber_MsgStart,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetHistory__storage_, msgStart),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "offset",
        .dataTypeSpecific.clazz = Nil,
        .number = GetHistory_FieldNumber_Offset,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetHistory__storage_, offset),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetHistory class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetHistory__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Revoke

@implementation Revoke

@dynamic sign;
@dynamic toUid;
@dynamic msgId;

typedef struct Revoke__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
  int64_t toUid;
  int64_t msgId;
} Revoke__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = Revoke_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Revoke__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toUid",
        .dataTypeSpecific.clazz = Nil,
        .number = Revoke_FieldNumber_ToUid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Revoke__storage_, toUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = Revoke_FieldNumber_MsgId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Revoke__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Revoke class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Revoke__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgRead

@implementation MsgRead

@dynamic sign;
@dynamic toUid;
@dynamic msgId;

typedef struct MsgRead__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
  int64_t toUid;
  int64_t msgId;
} MsgRead__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgRead_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgRead__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toUid",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgRead_FieldNumber_ToUid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgRead__storage_, toUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgRead_FieldNumber_MsgId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgRead__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MsgRead class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgRead__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LastReadMsg

@implementation LastReadMsg

@dynamic sign;
@dynamic fromUid;
@dynamic msgId;
@dynamic unread;
@dynamic updateTime;

typedef struct LastReadMsg__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
  int64_t fromUid;
  int64_t msgId;
  int64_t unread;
  int64_t updateTime;
} LastReadMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = LastReadMsg_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LastReadMsg__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fromUid",
        .dataTypeSpecific.clazz = Nil,
        .number = LastReadMsg_FieldNumber_FromUid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LastReadMsg__storage_, fromUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = LastReadMsg_FieldNumber_MsgId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LastReadMsg__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "unread",
        .dataTypeSpecific.clazz = Nil,
        .number = LastReadMsg_FieldNumber_Unread,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LastReadMsg__storage_, unread),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "updateTime",
        .dataTypeSpecific.clazz = Nil,
        .number = LastReadMsg_FieldNumber_UpdateTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(LastReadMsg__storage_, updateTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LastReadMsg class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LastReadMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DelChat

@implementation DelChat

@dynamic sign;
@dynamic toUid;
@dynamic updateTime;

typedef struct DelChat__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
  int64_t toUid;
  int64_t updateTime;
} DelChat__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = DelChat_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DelChat__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toUid",
        .dataTypeSpecific.clazz = Nil,
        .number = DelChat_FieldNumber_ToUid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DelChat__storage_, toUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "updateTime",
        .dataTypeSpecific.clazz = Nil,
        .number = DelChat_FieldNumber_UpdateTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DelChat__storage_, updateTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DelChat class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DelChat__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetChatList

@implementation GetChatList

@dynamic sign;
@dynamic updateTime;

typedef struct GetChatList__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
  int64_t updateTime;
} GetChatList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = GetChatList_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetChatList__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "updateTime",
        .dataTypeSpecific.clazz = Nil,
        .number = GetChatList_FieldNumber_UpdateTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetChatList__storage_, updateTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetChatList class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetChatList__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatItem

@implementation ChatItem

@dynamic uid;
@dynamic msgStart;
@dynamic msgEnd;
@dynamic msgLastRead;
@dynamic showMsgId;
@dynamic unread;
@dynamic matched;
@dynamic newMsg;
@dynamic myMove;
@dynamic iceBreak;
@dynamic tipFree;
@dynamic topAlbum;
@dynamic iBlockU;
@dynamic connected;

typedef struct ChatItem__storage_ {
  uint32_t _has_storage_[1];
  int64_t uid;
  int64_t msgStart;
  int64_t msgEnd;
  int64_t msgLastRead;
  int64_t showMsgId;
  int64_t unread;
} ChatItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatItem__storage_, uid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgStart",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_MsgStart,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChatItem__storage_, msgStart),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgEnd",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_MsgEnd,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChatItem__storage_, msgEnd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgLastRead",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_MsgLastRead,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ChatItem__storage_, msgLastRead),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "showMsgId",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_ShowMsgId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ChatItem__storage_, showMsgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "unread",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_Unread,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ChatItem__storage_, unread),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "matched",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_Matched,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "newMsg",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_NewMsg,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "myMove",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_MyMove,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "iceBreak",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_IceBreak,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "tipFree",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_TipFree,
        .hasIndex = 14,
        .offset = 15,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "topAlbum",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_TopAlbum,
        .hasIndex = 16,
        .offset = 17,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "iBlockU",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_IBlockU,
        .hasIndex = 18,
        .offset = 19,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "connected",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_Connected,
        .hasIndex = 20,
        .offset = 21,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatItem class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatItem__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatList

@implementation ChatList

@dynamic chatItemsArray, chatItemsArray_Count;
@dynamic updateTime;

typedef struct ChatList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *chatItemsArray;
  int64_t updateTime;
} ChatList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chatItemsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ChatItem),
        .number = ChatList_FieldNumber_ChatItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChatList__storage_, chatItemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateTime",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatList_FieldNumber_UpdateTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatList__storage_, updateTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatList class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatList__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetProfile

@implementation GetProfile

@dynamic sign;
@dynamic uid;
@dynamic updateTime;

typedef struct GetProfile__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
  int64_t uid;
  int64_t updateTime;
} GetProfile__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = GetProfile_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetProfile__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "uid",
        .dataTypeSpecific.clazz = Nil,
        .number = GetProfile_FieldNumber_Uid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetProfile__storage_, uid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "updateTime",
        .dataTypeSpecific.clazz = Nil,
        .number = GetProfile_FieldNumber_UpdateTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetProfile__storage_, updateTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetProfile class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetProfile__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetProfiles

@implementation GetProfiles

@dynamic sign;
@dynamic getProfilesArray, getProfilesArray_Count;

typedef struct GetProfiles__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *getProfilesArray;
  int64_t sign;
} GetProfiles__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = GetProfiles_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetProfiles__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "getProfilesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(GetProfile),
        .number = GetProfiles_FieldNumber_GetProfilesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetProfiles__storage_, getProfilesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetProfiles class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetProfiles__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Profile

@implementation Profile

@dynamic sign;
@dynamic uid;
@dynamic updateTime;
@dynamic nickName;
@dynamic avatar;
@dynamic gold;
@dynamic verified;

typedef struct Profile__storage_ {
  uint32_t _has_storage_[1];
  NSString *nickName;
  NSString *avatar;
  int64_t sign;
  int64_t uid;
  int64_t updateTime;
} Profile__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = Profile_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Profile__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "uid",
        .dataTypeSpecific.clazz = Nil,
        .number = Profile_FieldNumber_Uid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Profile__storage_, uid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "updateTime",
        .dataTypeSpecific.clazz = Nil,
        .number = Profile_FieldNumber_UpdateTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Profile__storage_, updateTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.clazz = Nil,
        .number = Profile_FieldNumber_NickName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Profile__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.clazz = Nil,
        .number = Profile_FieldNumber_Avatar,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Profile__storage_, avatar),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gold",
        .dataTypeSpecific.clazz = Nil,
        .number = Profile_FieldNumber_Gold,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "verified",
        .dataTypeSpecific.clazz = Nil,
        .number = Profile_FieldNumber_Verified,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Profile class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Profile__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ProfileList

@implementation ProfileList

@dynamic profilesArray, profilesArray_Count;

typedef struct ProfileList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *profilesArray;
} ProfileList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "profilesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Profile),
        .number = ProfileList_FieldNumber_ProfilesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ProfileList__storage_, profilesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProfileList class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProfileList__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BlockU

@implementation BlockU

@dynamic toUid;

typedef struct BlockU__storage_ {
  uint32_t _has_storage_[1];
  int64_t toUid;
} BlockU__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "toUid",
        .dataTypeSpecific.clazz = Nil,
        .number = BlockU_FieldNumber_ToUid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BlockU__storage_, toUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BlockU class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BlockU__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UnblockU

@implementation UnblockU

@dynamic toUid;

typedef struct UnblockU__storage_ {
  uint32_t _has_storage_[1];
  int64_t toUid;
} UnblockU__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "toUid",
        .dataTypeSpecific.clazz = Nil,
        .number = UnblockU_FieldNumber_ToUid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UnblockU__storage_, toUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UnblockU class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UnblockU__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ProfileOnline

@implementation ProfileOnline

@dynamic uid;
@dynamic updateTime;
@dynamic nickName;
@dynamic avatar;
@dynamic gold;
@dynamic verified;

typedef struct ProfileOnline__storage_ {
  uint32_t _has_storage_[1];
  NSString *nickName;
  NSString *avatar;
  int64_t uid;
  int64_t updateTime;
} ProfileOnline__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.clazz = Nil,
        .number = ProfileOnline_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ProfileOnline__storage_, uid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "updateTime",
        .dataTypeSpecific.clazz = Nil,
        .number = ProfileOnline_FieldNumber_UpdateTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ProfileOnline__storage_, updateTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.clazz = Nil,
        .number = ProfileOnline_FieldNumber_NickName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ProfileOnline__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.clazz = Nil,
        .number = ProfileOnline_FieldNumber_Avatar,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ProfileOnline__storage_, avatar),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gold",
        .dataTypeSpecific.clazz = Nil,
        .number = ProfileOnline_FieldNumber_Gold,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "verified",
        .dataTypeSpecific.clazz = Nil,
        .number = ProfileOnline_FieldNumber_Verified,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProfileOnline class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProfileOnline__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UsrOffline

@implementation UsrOffline

@dynamic uid;

typedef struct UsrOffline__storage_ {
  uint32_t _has_storage_[1];
  int64_t uid;
} UsrOffline__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.clazz = Nil,
        .number = UsrOffline_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UsrOffline__storage_, uid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UsrOffline class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UsrOffline__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Signup

@implementation Signup

@dynamic sign;
@dynamic nickName;
@dynamic avatar;
@dynamic pic;
@dynamic gold;
@dynamic verified;

typedef struct Signup__storage_ {
  uint32_t _has_storage_[1];
  NSString *nickName;
  NSString *avatar;
  NSString *pic;
  int64_t sign;
} Signup__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = Signup_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Signup__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.clazz = Nil,
        .number = Signup_FieldNumber_NickName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Signup__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.clazz = Nil,
        .number = Signup_FieldNumber_Avatar,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Signup__storage_, avatar),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pic",
        .dataTypeSpecific.clazz = Nil,
        .number = Signup_FieldNumber_Pic,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Signup__storage_, pic),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gold",
        .dataTypeSpecific.clazz = Nil,
        .number = Signup_FieldNumber_Gold,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "verified",
        .dataTypeSpecific.clazz = Nil,
        .number = Signup_FieldNumber_Verified,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Signup class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Signup__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
