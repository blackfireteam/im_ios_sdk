// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatProtobuf.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ChatProtobuf.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ChatItem);
GPBObjCClassDeclaration(ChatR);

#pragma mark - ChatProtobufRoot

@implementation ChatProtobufRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ChatProtobufRoot_FileDescriptor

static GPBFileDescriptor *ChatProtobufRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ImToken

@implementation ImToken

@dynamic sign;
@dynamic token;

typedef struct ImToken__storage_ {
  uint32_t _has_storage_[1];
  NSString *token;
  int64_t sign;
} ImToken__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = ImToken_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ImToken__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "token",
        .dataTypeSpecific.clazz = Nil,
        .number = ImToken_FieldNumber_Token,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ImToken__storage_, token),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ImToken class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ImToken__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Ping

@implementation Ping

@dynamic type;

typedef struct Ping__storage_ {
  uint32_t _has_storage_[1];
  int64_t type;
} Ping__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.clazz = Nil,
        .number = Ping_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Ping__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Ping class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Ping__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Result

@implementation Result

@dynamic sign;
@dynamic code;
@dynamic msg;
@dynamic nowTime;
@dynamic uid;

typedef struct Result__storage_ {
  uint32_t _has_storage_[1];
  NSString *msg;
  int64_t sign;
  int64_t code;
  int64_t nowTime;
  int64_t uid;
} Result__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = Result_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Result__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = Result_FieldNumber_Code,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Result__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = Nil,
        .number = Result_FieldNumber_Msg,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Result__storage_, msg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nowTime",
        .dataTypeSpecific.clazz = Nil,
        .number = Result_FieldNumber_NowTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Result__storage_, nowTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "uid",
        .dataTypeSpecific.clazz = Nil,
        .number = Result_FieldNumber_Uid,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Result__storage_, uid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Result class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Result__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatS

@implementation ChatS

@dynamic sign;
@dynamic type;
@dynamic toUid;
@dynamic body;
@dynamic width;
@dynamic height;

typedef struct ChatS__storage_ {
  uint32_t _has_storage_[1];
  NSString *body;
  int64_t sign;
  int64_t type;
  int64_t toUid;
  int64_t width;
  int64_t height;
} ChatS__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatS__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChatS__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toUid",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_ToUid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChatS__storage_, toUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "body",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_Body,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ChatS__storage_, body),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "width",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_Width,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ChatS__storage_, width),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "height",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_Height,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ChatS__storage_, height),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatS class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatS__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatSR

@implementation ChatSR

@dynamic sign;
@dynamic msgId;

typedef struct ChatSR__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
  int64_t msgId;
} ChatSR__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatSR_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatSR__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatSR_FieldNumber_MsgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChatSR__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatSR class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatSR__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatR

@implementation ChatR

@dynamic msgId;
@dynamic fromUid;
@dynamic type;
@dynamic body;
@dynamic width;
@dynamic height;

typedef struct ChatR__storage_ {
  uint32_t _has_storage_[1];
  NSString *body;
  int64_t msgId;
  int64_t fromUid;
  int64_t type;
  int64_t width;
  int64_t height;
} ChatR__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_MsgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatR__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fromUid",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_FromUid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChatR__storage_, fromUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChatR__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "body",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_Body,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ChatR__storage_, body),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "width",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_Width,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ChatR__storage_, width),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "height",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_Height,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ChatR__storage_, height),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatR class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatR__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatRbatch

@implementation ChatRbatch

@dynamic sign;
@dynamic msgsArray, msgsArray_Count;

typedef struct ChatRbatch__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *msgsArray;
  int64_t sign;
} ChatRbatch__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatRbatch_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatRbatch__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ChatR),
        .number = ChatRbatch_FieldNumber_MsgsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChatRbatch__storage_, msgsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatRbatch class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatRbatch__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetHistory

@implementation GetHistory

@dynamic sign;
@dynamic toUid;
@dynamic msgId;
@dynamic offset;

typedef struct GetHistory__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
  int64_t toUid;
  int64_t msgId;
  int64_t offset;
} GetHistory__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = GetHistory_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetHistory__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toUid",
        .dataTypeSpecific.clazz = Nil,
        .number = GetHistory_FieldNumber_ToUid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetHistory__storage_, toUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = GetHistory_FieldNumber_MsgId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetHistory__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "offset",
        .dataTypeSpecific.clazz = Nil,
        .number = GetHistory_FieldNumber_Offset,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetHistory__storage_, offset),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetHistory class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetHistory__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Revoke

@implementation Revoke

@dynamic sign;
@dynamic toUid;
@dynamic msgId;

typedef struct Revoke__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
  int64_t toUid;
  int64_t msgId;
} Revoke__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = Revoke_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Revoke__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toUid",
        .dataTypeSpecific.clazz = Nil,
        .number = Revoke_FieldNumber_ToUid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Revoke__storage_, toUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = Revoke_FieldNumber_MsgId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Revoke__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Revoke class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Revoke__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgRead

@implementation MsgRead

@dynamic sign;
@dynamic toUid;
@dynamic msgId;

typedef struct MsgRead__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
  int64_t toUid;
  int64_t msgId;
} MsgRead__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgRead_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgRead__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toUid",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgRead_FieldNumber_ToUid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgRead__storage_, toUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgRead_FieldNumber_MsgId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgRead__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MsgRead class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgRead__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LastReadMsg

@implementation LastReadMsg

@dynamic fromUid;
@dynamic msgId;
@dynamic unread;

typedef struct LastReadMsg__storage_ {
  uint32_t _has_storage_[1];
  int64_t fromUid;
  int64_t msgId;
  int64_t unread;
} LastReadMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fromUid",
        .dataTypeSpecific.clazz = Nil,
        .number = LastReadMsg_FieldNumber_FromUid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LastReadMsg__storage_, fromUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = LastReadMsg_FieldNumber_MsgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LastReadMsg__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "unread",
        .dataTypeSpecific.clazz = Nil,
        .number = LastReadMsg_FieldNumber_Unread,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LastReadMsg__storage_, unread),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LastReadMsg class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LastReadMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DelChat

@implementation DelChat

@dynamic sign;
@dynamic toUid;

typedef struct DelChat__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
  int64_t toUid;
} DelChat__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = DelChat_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DelChat__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toUid",
        .dataTypeSpecific.clazz = Nil,
        .number = DelChat_FieldNumber_ToUid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DelChat__storage_, toUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DelChat class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DelChat__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetChatList

@implementation GetChatList

@dynamic sign;
@dynamic msgId;

typedef struct GetChatList__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
  int64_t msgId;
} GetChatList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = GetChatList_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetChatList__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = GetChatList_FieldNumber_MsgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetChatList__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetChatList class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetChatList__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatItem

@implementation ChatItem

@dynamic uid;
@dynamic msgStart;
@dynamic msgEnd;
@dynamic lastMsg;
@dynamic unread;
@dynamic isNew;
@dynamic myMove;
@dynamic iceBreak;
@dynamic tipFree;

typedef struct ChatItem__storage_ {
  uint32_t _has_storage_[1];
  NSString *lastMsg;
  int64_t uid;
  int64_t msgStart;
  int64_t msgEnd;
  int64_t unread;
} ChatItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatItem__storage_, uid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgStart",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_MsgStart,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChatItem__storage_, msgStart),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgEnd",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_MsgEnd,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChatItem__storage_, msgEnd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "lastMsg",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_LastMsg,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ChatItem__storage_, lastMsg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "unread",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_Unread,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ChatItem__storage_, unread),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isNew",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_IsNew,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "myMove",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_MyMove,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "iceBreak",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_IceBreak,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "tipFree",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_TipFree,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatItem class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatItem__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatList

@implementation ChatList

@dynamic chatItemsArray, chatItemsArray_Count;

typedef struct ChatList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *chatItemsArray;
} ChatList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chatItemsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ChatItem),
        .number = ChatList_FieldNumber_ChatItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChatList__storage_, chatItemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatList class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatList__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
